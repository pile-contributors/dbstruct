/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  \file %(table)s.h
  \date %(Month)s %(Year)s
  \author %(Author)s

  \brief Auto-generated data class for %(Table)s view.


*//*

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
#ifndef %(NAMESPACE)s_DB_%(DATABASE)s_VIEW_%(TABLE)s_GUARD
#define %(NAMESPACE)s_DB_%(DATABASE)s_VIEW_%(TABLE)s_GUARD
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

%(IMPORTH)s
#include "%(table)s-meta.h"
#include <dbstruct/dbrecord.h>

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */

class QSqlQuery;
class QSqlRecord;
class QSqlDatabase;

/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */

namespace %(namespace)s {
namespace %(database)s {

//! Mirrors %(Table)s database view.
///
class %(EXPORT)s %(Table)s : public meta::%(Table)s, public %(RecordBaseClass)s {
    //
    //
    //
    //
    /*  DEFINITIONS    ----------------------------------------------------- */

public:

%(TableDataMembers)s

    /*  DEFINITIONS    ===================================================== */
    //
    //
    //
    //
    /*  DATA    ------------------------------------------------------------ */

public:


    /*  DATA    ============================================================ */
    //
    //
    //
    //
    /*  FUNCTIONS    ------------------------------------------------------- */

public:

    //! constructor
    explicit %(Table)s() : meta::%(Table)s(), %(RecordBaseClass)s(),
%(DefaultConstructor)s
    {}

    //! destructor
    virtual ~%(Table)s () {}

    //! copy constructor
    %(Table)s (const %(Table)s & other) :
%(CopyConstructor)s
    {}

    //! assignment operator
    %(Table)s& operator= (const %(Table)s& other) {
%(AssignConstructor)s
        return *this;
    }

    //! Bind a single value identified by column index in a query.
    virtual void
    bindOne (
            QSqlQuery & query,
            int i) const;

    //! Bind values to names in a query.
    virtual void
    bind (
        QSqlQuery & query) const;

    //! Export the content of a record to a map.
    virtual DbRecMap
    toMap () const;

    //! Get values from a query.
    virtual bool
    retrieve (
        const QSqlQuery & query,
        QSqlDatabase & /*db*/);

    //! Get values from a record.
    virtual bool
    retrieve (
        const QSqlRecord & rec,
        QSqlDatabase & /*db*/);

    //! Load values from an associative array.
    virtual bool
    retrieve (
        const DbRecMap & map,
        QSqlDatabase & /*db*/);

    //! Set the index to given value (if the model has an id column).
    virtual void
    setId (
            long value) {
        %(SET_ID_RESULT)s;
    }

    //! Get the index of this instance (if the model has an id column).
    virtual long
    getId () const {
        return %(GET_ID_RESULT)s;
    }


    /*  FUNCTIONS    ======================================================= */
    //
    //
    //
    //

    public: virtual void anchorVtable() const;
}; /* class %(Table)s */

/*  CLASS    =============================================================== */
//
//
//
//

} // namespace %(database)s
} // namespace %(namespace)s

#endif // %(NAMESPACE)s_DB_%(DATABASE)s_VIEW_%(TABLE)s_GUARD
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
