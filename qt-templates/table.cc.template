/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  \file %(table)s.cc
  \date %(Month)s %(Year)s
  \author %(Author)s

  \brief Auto-generated model for %(Table)s table.


*//*

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

#include "%(table)s.h"

#include <QSqlQuery>
#include <QSqlRecord>
#include <QSqlError>
#include <QSqlDatabase>
#include <QVariant>

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */

using namespace %(namespace)s::%(database)s;

/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */


/* ------------------------------------------------------------------------- */
void %(Table)s::bindOne (QSqlQuery & query, int i) const
{
    switch (i) {
%(BIND_ONE_COLUMN)s
    default: break; // DB_%(TABLE)s_DEBUGM("index out of bounds: %%d\n", i); break;
    }
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void %(Table)s::bind (QSqlQuery & query) const
{
    %(Table)s * result = const_cast<%(Table)s *>(this);
%(SetTableOverrides)s
%(BIND_COLUMNS)s
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool %(Table)s::retrieve (const QSqlQuery & query, QSqlDatabase & /*db*/)
{
    bool b_ret = true;
    bool b_one = true;

%(RETREIVE_COLUMNS)s
    return b_ret;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool %(Table)s::retrieve (const QSqlRecord & rec, QSqlDatabase & /*db*/)
{
    bool b_ret = true;
    bool b_one = true;

%(RECORD_COLUMNS)s
    return b_ret;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool %(Table)s::retrieve (const DbRecMap & map, QSqlDatabase & /*db*/)
{
    bool b_ret = true;
    bool b_one = true;
    DbRecMap::const_iterator i;
    for (i = map.begin(); i != map.end(); ++i) {

%(RecFromMap)s
    }
    return b_ret;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
DbRecMap %(Table)s::toMap () const
{
    DbRecMap result;

%(RecToMap)s
    return result;
}
/* ========================================================================= */

/*  CLASS    =============================================================== */
//
//
//
//
void %(Table)s::anchorVtable() const {}
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
